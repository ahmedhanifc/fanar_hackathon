const fs = require('fs').promises;
const path = require('path');

class ReportGenerator {
    constructor() {
        this.templates = {
            consumer_complaint: {
                english: this.getConsumerComplaintEnglishTemplate(),
                arabic: this.getConsumerComplaintArabicTemplate()
            },
            traffic_accident: {
                english: this.getTrafficAccidentEnglishTemplate(),
                arabic: this.getTrafficAccidentArabicTemplate()
            }
        };
    }

    async generateReport(caseData, language = 'english') {
        const caseType = caseData.caseType;
        const template = this.templates[caseType][language];
        
        if (!template) {
            throw new Error(`Template not found for case type: ${caseType}, language: ${language}`);
        }

        return this.fillTemplate(template, caseData);
    }

    fillTemplate(template, data) {
        let report = template;
        
        // Replace placeholders with actual data
        const replacements = this.extractReplacements(data);
        
        for (const [placeholder, value] of Object.entries(replacements)) {
            const regex = new RegExp(`\\{\\{${placeholder}\\}\\}`, 'g');
            report = report.replace(regex, value || 'N/A');
        }
        
        return report;
    }

    extractReplacements(data) {
        const replacements = {};
        
        // Flatten nested objects for template replacement
        function flatten(obj, prefix = '') {
            for (const [key, value] of Object.entries(obj)) {
                if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
                    flatten(value, `${prefix}${key}_`);
                } else {
                    replacements[`${prefix}${key}`] = value;
                }
            }
        }
        
        flatten(data);
        return replacements;
    }

    getConsumerComplaintEnglishTemplate() {
        return `CONSUMER COMPLAINT REPORT

Case Information:
- Case Type: Consumer Complaint
- Date of Incident: {{dateOfIncident}}
- Location: {{location}}
- Status: {{status}}

Complainant Information:
- Name: {{contactInfo_name}}
- Phone: {{contactInfo_phone}}
- Email: {{contactInfo_email}}
- Address: {{contactInfo_address}}

Merchant Information:
- Business Name: {{merchantName}}
- Contact Information: {{merchantContact}}

Product/Service Details:
- Product/Service: {{productService}}
- Purchase Date: {{purchaseDate}}
- Purchase Amount: {{purchaseAmount}} QAR
- Complaint Type: {{complaintType}}

Incident Description:
{{description}}

Previous Communication:
{{previousCommunication}}

Desired Outcome:
{{desiredOutcome}}

Evidence Attached:
{{evidence}}

Report Generated on: {{createdAt}}
Last Updated: {{updatedAt}}

---
This report has been generated by the Legal Assistant System.
For legal advice, please consult with a qualified attorney.`;
    }

    getConsumerComplaintArabicTemplate() {
        return `تقرير شكوى المستهلك

معلومات القضية:
- نوع القضية: شكوى مستهلك
- تاريخ الحادث: {{dateOfIncident}}
- الموقع: {{location}}
- الحالة: {{status}}

معلومات الشاكي:
- الاسم: {{contactInfo_name}}
- الهاتف: {{contactInfo_phone}}
- البريد الإلكتروني: {{contactInfo_email}}
- العنوان: {{contactInfo_address}}

معلومات التاجر:
- اسم المؤسسة: {{merchantName}}
- معلومات الاتصال: {{merchantContact}}

تفاصيل المنتج/الخدمة:
- المنتج/الخدمة: {{productService}}
- تاريخ الشراء: {{purchaseDate}}
- مبلغ الشراء: {{purchaseAmount}} ريال قطري
- نوع الشكوى: {{complaintType}}

وصف الحادث:
{{description}}

التواصل السابق:
{{previousCommunication}}

النتيجة المطلوبة:
{{desiredOutcome}}

المرفقات:
{{evidence}}

تم إنشاء التقرير في: {{createdAt}}
آخر تحديث: {{updatedAt}}

---
تم إنشاء هذا التقرير بواسطة نظام المساعدة القانونية.
للحصول على استشارة قانونية، يرجى استشارة محامٍ مؤهل.`;
    }

    getTrafficAccidentEnglishTemplate() {
        return `TRAFFIC ACCIDENT REPORT

Case Information:
- Case Type: Traffic Accident
- Date of Incident: {{dateOfIncident}}
- Location: {{location}}
- Status: {{status}}

Complainant Information:
- Name: {{contactInfo_name}}
- Phone: {{contactInfo_phone}}
- Email: {{contactInfo_email}}
- Address: {{contactInfo_address}}

Accident Details:
- Accident Type: {{accidentType}}
- Description: {{description}}

Vehicle Information:
- Make: {{vehiclesInvolved_myVehicle_make}}
- Model: {{vehiclesInvolved_myVehicle_model}}
- Year: {{vehiclesInvolved_myVehicle_year}}
- Plate Number: {{vehiclesInvolved_myVehicle_plateNumber}}
- Insurance: {{vehiclesInvolved_myVehicle_insurance}}

Parties Involved:
- Driver: {{partiesInvolved_driver}}
- Passengers: {{partiesInvolved_passengers}}
- Witnesses: {{partiesInvolved_witnesses}}

Injuries:
- My Injuries: {{injuries_myInjuries}}
- Other Injuries: {{injuries_otherInjuries}}
- Medical Attention: {{injuries_medicalAttention}}

Police Involvement:
- Police Called: {{policeInvolved}}
- Police Report: {{policeReport}}

Insurance:
- Insurance Claim: {{insuranceClaim}}
- Insurance Company: {{insuranceCompany}}

Evidence Attached:
{{evidence}}

Report Generated on: {{createdAt}}
Last Updated: {{updatedAt}}

---
This report has been generated by the Legal Assistant System.
For legal advice, please consult with a qualified attorney.`;
    }

    getTrafficAccidentArabicTemplate() {
        return `تقرير حادث مروري

معلومات القضية:
- نوع القضية: حادث مروري
- تاريخ الحادث: {{dateOfIncident}}
- الموقع: {{location}}
- الحالة: {{status}}

معلومات المتضرر:
- الاسم: {{contactInfo_name}}
- الهاتف: {{contactInfo_phone}}
- البريد الإلكتروني: {{contactInfo_email}}
- العنوان: {{contactInfo_address}}

تفاصيل الحادث:
- نوع الحادث: {{accidentType}}
- الوصف: {{description}}

معلومات المركبة:
- الماركة: {{vehiclesInvolved_myVehicle_make}}
- الموديل: {{vehiclesInvolved_myVehicle_model}}
- السنة: {{vehiclesInvolved_myVehicle_year}}
- رقم اللوحة: {{vehiclesInvolved_myVehicle_plateNumber}}
- التأمين: {{vehiclesInvolved_myVehicle_insurance}}

الأطراف المشاركة:
- السائق: {{partiesInvolved_driver}}
- الركاب: {{partiesInvolved_passengers}}
- الشهود: {{partiesInvolved_witnesses}}

الإصابات:
- إصاباتي: {{injuries_myInjuries}}
- إصابات أخرى: {{injuries_otherInjuries}}
- رعاية طبية: {{injuries_medicalAttention}}

تدخل الشرطة:
- تم استدعاء الشرطة: {{policeInvolved}}
- تقرير الشرطة: {{policeReport}}

التأمين:
- مطالبة تأمين: {{insuranceClaim}}
- شركة التأمين: {{insuranceCompany}}

المرفقات:
{{evidence}}

تم إنشاء التقرير في: {{createdAt}}
آخر تحديث: {{updatedAt}}

---
تم إنشاء هذا التقرير بواسطة نظام المساعدة القانونية.
للحصول على استشارة قانونية، يرجى استشارة محامٍ مؤهل.`;
    }

    async saveReport(report, filename) {
        const reportsDir = path.join(__dirname, '../../reports');
        
        // Create reports directory if it doesn't exist
        try {
            await fs.mkdir(reportsDir, { recursive: true });
        } catch (error) {
            // Directory might already exist
        }
        
        const filepath = path.join(reportsDir, filename);
        await fs.writeFile(filepath, report, 'utf8');
        
        return filepath;
    }

    generateFilename(caseData, language) {
        const timestamp = new Date().toISOString().split('T')[0];
        const caseType = caseData.caseType.replace('_', '-');
        const name = caseData.contactInfo?.name?.replace(/\s+/g, '-') || 'unknown';
        
        return `${caseType}-${name}-${timestamp}-${language}.txt`;
    }
}

module.exports = { ReportGenerator }; 